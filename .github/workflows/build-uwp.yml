name: Build UWP Application

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_CONFIG: ${{ (github.event_name == 'pull_request') && 'Debug' || 'Release' }}
  TARGET_BRANCH: ${{ (github.event_name == 'workflow_dispatch') && 'master' || github.ref }}

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: microsoft/setup-msbuild@v2

    - uses: actions/checkout@v4
      with:
        ref: ${{ env.TARGET_BRANCH }}

    - uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}

    - name: Restore and Build
      run: |
        $certificatePath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "CustomCertificate.pfx"
        try {
          Write-Host "Writing temporary certificate file..."
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.KEYSTORE_BASE64 }}")
          [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)

          Write-Host "Reading certificate information..."
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(
              $certificatePath,"${{ secrets.KEY_PASSWORD }}",
              [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
          )
          Write-Host "Subject: $($cert.Subject)"
          Write-Host "Thumbprint: $($cert.Thumbprint)"

          Write-Host "Starting MSBuild..."
          msbuild AllLive.sln `
          /target:Restore,Build `
          /property:AppxBundle=Always `
          /property:AppxBundlePlatforms=x64 `
          /property:Configuration=${{ env.BUILD_CONFIG }} `
          /property:GenerateTemporaryStoreCertificate=true `
          /property:PackageCertificateKeyFile="$certificatePath" `
          /property:PackageCertificatePassword="${{ secrets.KEY_PASSWORD }}" `
          /property:PackageCertificateThumbprint="$($cert.Thumbprint)" `
          /property:PackagePublisher="CN=$($cert.Thumbprint)" `
          /property:UapAppxPackageBuildMode=StoreUpload
        }
        finally {
          if (Test-Path $certificatePath) {
            Write-Host "Cleaning up temporary certificate file..."
            Remove-Item -Path $certificatePath -Force
          }
        }

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      with:
        name: AllLive-MSIX-Bundle
        path: '**/AppPackages/**/*.msixbundle'

    - name: Generate Commit SHA
      if: github.event_name == 'workflow_dispatch'
      id: sha
      run: |
        echo "full_sha=$(git rev-parse HEAD)" >> $env:GITHUB_OUTPUT
        echo "short_sha=$(git rev-parse --short HEAD)" >> $env:GITHUB_OUTPUT

    - name: Create Release Manually
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      with:
        prerelease: true
        files: '**/AppPackages/**/*.msixbundle'
        tag_name: ${{ steps.sha.outputs.short_sha }}
        target_commitish: ${{ steps.sha.outputs.full_sha }}
        # name: 'Preview Build : ${{ steps.sha.outputs.short_sha }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
